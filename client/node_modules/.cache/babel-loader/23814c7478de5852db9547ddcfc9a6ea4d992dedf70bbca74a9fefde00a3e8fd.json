{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Said Solsaev\\\\Documents\\\\GitHub\\\\fullstack-food-ordering\\\\client\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useReducer } from 'react';\n\n// Define the initial state of the cart\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  cartItems: []\n};\n\n// Create the cart context\nexport const CartContext = /*#__PURE__*/createContext();\n\n// Define a custom hook to access the cart context\nexport function useCart() {\n  _s();\n  return useContext(CartContext);\n}\n\n// Define the cart reducer function\n_s(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction cartReducer(state, action) {\n  switch (action.type) {\n    case 'ADD_TO_CART':\n      const existingItem = state.cartItems.find(item => item.item._id === action.payload.item._id);\n      if (existingItem) {\n        return {\n          ...state,\n          cartItems: state.cartItems.map(item => item.item._id === action.payload.item._id ? {\n            ...item,\n            quantity: item.quantity + 1\n          } : item)\n        };\n      } else {\n        return {\n          ...state,\n          cartItems: [...state.cartItems, {\n            ...action.payload,\n            quantity: 1\n          }]\n        };\n      }\n    case 'ADD_QUANTITY':\n      return {\n        ...state,\n        cartItems: state.cartItems.map(item => item.item._id === action.payload ? {\n          ...item,\n          quantity: item.quantity + 1\n        } : item)\n      };\n    case 'REDUCE_QUANTITY':\n      return {\n        ...state,\n        cartItems: state.cartItems.map(item => item.item._id === action.payload ? {\n          ...item,\n          quantity: Math.max(1, item.quantity - 1)\n        } : item)\n      };\n    case 'REMOVE_FROM_CART':\n      return {\n        ...state,\n        cartItems: state.cartItems.filter(item => item.item._id !== action.payload)\n      };\n    case 'CLEAR_CART':\n      return {\n        ...state,\n        cartItems: []\n      };\n    default:\n      return state;\n  }\n}\n\n// Create a CartProvider component to wrap your app\nexport function CartProvider({\n  children\n}) {\n  _s2();\n  const [cartState, dispatch] = useReducer(cartReducer, initialState);\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartState,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n_s2(CartProvider, \"5HMyNLafr0jAB3F1BrBNunCcgEE=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useContext","useReducer","jsxDEV","_jsxDEV","initialState","cartItems","CartContext","useCart","_s","cartReducer","state","action","type","existingItem","find","item","_id","payload","map","quantity","Math","max","filter","CartProvider","children","_s2","cartState","dispatch","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Said Solsaev/Documents/GitHub/fullstack-food-ordering/client/src/context/CartContext.js"],"sourcesContent":["import { createContext, useContext, useReducer } from 'react';\r\n\r\n// Define the initial state of the cart\r\nconst initialState = {\r\n    cartItems: [],\r\n};\r\n\r\n// Create the cart context\r\nexport const CartContext = createContext();\r\n\r\n// Define a custom hook to access the cart context\r\nexport function useCart() {\r\n  return useContext(CartContext);\r\n}\r\n\r\n// Define the cart reducer function\r\nfunction cartReducer(state, action) {\r\n    switch (action.type) {\r\n        case 'ADD_TO_CART':\r\n            const existingItem = state.cartItems.find(item => item.item._id === action.payload.item._id);\r\n\r\n            if (existingItem){\r\n                return{\r\n                    ...state,\r\n                    cartItems: state.cartItems.map(item => \r\n                        item.item._id === action.payload.item._id\r\n                        ? {...item, quantity: item.quantity +1}\r\n                        : item\r\n                    ),\r\n                };\r\n\r\n                \r\n            }else{\r\n                return {\r\n                    ...state,\r\n                    cartItems: [...state.cartItems, {...action.payload, quantity: 1}],\r\n                };\r\n            }\r\n        case 'ADD_QUANTITY':\r\n            return{\r\n                ...state,\r\n                cartItems: state.cartItems.map(item => \r\n                    item.item._id === action.payload\r\n                    ? {...item, quantity: item.quantity +1}\r\n                    : item\r\n                ),\r\n            };\r\n        case 'REDUCE_QUANTITY':\r\n            return{\r\n                ...state,\r\n                cartItems: state.cartItems.map(item => \r\n                    item.item._id === action.payload\r\n                    ? {...item, quantity: Math.max(1, item.quantity - 1)}\r\n                    : item\r\n                ),\r\n            };\r\n        case 'REMOVE_FROM_CART':\r\n            return {\r\n                ...state,\r\n                cartItems: state.cartItems.filter(item => item.item._id !== action.payload),\r\n            };\r\n        case 'CLEAR_CART':\r\n            return {\r\n                ...state,\r\n                cartItems: [],\r\n            };\r\n        default:\r\n        return state;\r\n    }\r\n}\r\n\r\n// Create a CartProvider component to wrap your app\r\nexport function CartProvider({ children }) {\r\n    const [cartState, dispatch] = useReducer(cartReducer, initialState);\r\n\r\n    return (\r\n        <CartContext.Provider value={{ cartState, dispatch }}>\r\n            {children}\r\n        </CartContext.Provider>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}